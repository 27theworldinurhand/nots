---
# tasks_ios.yml
- name: "IOS >> Collect OSPF PID {{ process.id }} info from routers"
  ios_command:
    provider: "{{ login_creds }}"
    commands: "{{ commands }}"
  register: IOS_OUTPUT

- name: "DEBUG >> Dump IOS text output (stdout)"
  debug:
    var: IOS_OUTPUT.stdout
    verbosity: 1

- name: "LOG >> Write IOS text output to disk, DTG {{ hostvars.localhost.DTG }}"
  template:
    src: "templates/log.j2"
    dest: "logs/{{ inventory_hostname }}_{{ hostvars.localhost.DTG }}.txt"
  changed_when: false

- name: "SYS >> Parse IOS text output into structured data"
  set_fact:
    OSPF_BASIC: "{{ IOS_OUTPUT.stdout[0] | ios_ospf_basic }}"
    OSPF_NBR: "{{ IOS_OUTPUT.stdout[1] | ios_ospf_neighbor }}"
    OSPF_DB: "{{ IOS_OUTPUT.stdout[2] | ios_ospf_dbsum }}"
    OSPF_TRAF: "{{ IOS_OUTPUT.stdout[3] | ios_ospf_traffic }}"
    OSPF_FRR: "{{ IOS_OUTPUT.stdout[4] | ios_ospf_frr }}"
    BFD_NBR: "{{ IOS_OUTPUT.stdout[5] | ios_bfd_neighbor }}"

- name: "SYS >> Check for <= {{ process.pkt_thres | default('-') }} pkt errors"
  assert:
    that:
      - "item.adj_throttle >= 0 and item.adj_throttle <= process.pkt_thres"
      - "item.area_mismatch >= 0 and item.area_mismatch <= process.pkt_thres"
      - "item.auth >= 0 and item.auth <= process.pkt_thres"
      - "item.auth_type >= 0 and item.auth_type <= process.pkt_thres"
      - "item.bad_src >= 0 and item.bad_src <= process.pkt_thres"
      - "item.bfd >= 0 and item.bfd <= process.pkt_thres"
      - "item.checksum >= 0 and item.checksum <= process.pkt_thres"
      - "item.dup_rid >= 0 and item.dup_rid <= process.pkt_thres"
      - "item.hello_pkt >= 0 and item.hello_pkt <= process.pkt_thres"
      - "item.instance_id >= 0 and item.instance_id <= process.pkt_thres"
      - "item.length >= 0 and item.length <= process.pkt_thres"
      - "item.lls >= 0 and item.lls <= process.pkt_thres"
      - "item.lsa_checksum >= 0 and item.lsa_checksum <= process.pkt_thres"
      - "item.lsa_data >= 0 and item.lsa_data <= process.pkt_thres"
      - "item.lsa_length >= 0 and item.lsa_length <= process.pkt_thres"
      - "item.lsa_type >= 0 and item.lsa_type <= process.pkt_thres"
      - "item.mtu_mismatch >= 0 and item.mtu_mismatch <= process.pkt_thres"
      - "item.nbr_ignored >= 0 and item.nbr_ignored <= process.pkt_thres"
      - "item.no_sl >= 0 and item.no_sl <= process.pkt_thres"
      - "item.no_vl >= 0 and item.no_vl <= process.pkt_thres"
      - "item.self_orig >= 0 and item.self_orig <= process.pkt_thres"
      - "item.test_discard >= 0 and item.test_discard <= process.pkt_thres"
      - "item.ttlsec_fail >= 0 and item.ttlsec_fail <= process.pkt_thres"
      - "item.unk_nbr >= 0 and item.unk_nbr <= process.pkt_thres"
      - "item.version >= 0 and item.version <= process.pkt_thres"
    msg: |-
      Non-zero errors discovered in OSPF traffic stats. Try clearing
      these traffic stats with 'clear ip ospf {{ process.id }} traffic'
      wait a few minutes, then run the playbook again. If these timers
      continue to increase, there is likely a legitimate problem.
      saw {{ item | to_nice_json }}
  when: "process.pkt_thres is defined"
  with_items: "{{ OSPF_TRAF }}"
  loop_control:
    label: "intf:{{ item.intf }}"
- name: "SYS >> Ensure the router has correct number of neighbors"
  assert:
    that: "my_nbr_count | int == OSPF_NBR | length"
    msg: |-
      Expected neighbor count did not match actual neighbors seen
      expected {{ my_nbr_count }}, saw {{ OSPF_NBR | length }}

- name: "SYS >> Assert that all OSPF neighbors are up and healthy"
  assert:
    that: >-
      item.state | lower == 'full' or
      (item.state | lower == '2way' and item.role | lower == 'drother')
    msg: |-
      Invalid neighbor. state must be full or a combination of 2way plus
      the drother role to be considered valid.
      saw {{ item }}
  with_items: "{{ OSPF_NBR }}"
  loop_control:
    label: "nbr:{{ item.rid }}  state:{{ item.state }}  role:{{ item.role }}"

- name: "SYS >> Ensure all OSPF neighbors are also BFD neighbors"
  assert:
    that: "BFD_NBR | check_bfd_up(item)"
    msg: |-
      Could not find OSPF neighbor in list of BFD neighbors.
      expected OSPF neighbor {{ item | to_nice_json }}
      in list of BFD neighbors {{ BFD_NBR | to_nice_json }}
  when: "process.has_bfd"
  with_items: "{{ OSPF_NBR }}"
  loop_control:
    label: "peer:{{ item.peer }}"

- name: "SYS >> Check process ID {{ process.id }}, reference BW, SPF, etc."
  assert:
    that:
      - "process.id | int == OSPF_BASIC.process.id"
      - "process.ref_bw | int == OSPF_BASIC.process.ref_bw"
      - "process.init_spf | int == OSPF_BASIC.process.init_spf"
      - "process.min_spf | int == OSPF_BASIC.process.min_spf"
      - "process.max_spf | int == OSPF_BASIC.process.max_spf"
      - "process.has_ispf  == OSPF_BASIC.process.has_ispf"
      - "process.has_bfd  == OSPF_BASIC.process.has_bfd"
      - "process.has_ttlsec  == OSPF_BASIC.process.has_ttlsec"
    msg: |-
      Mismatched process-level configuration from specification.
      expected {{ process | to_nice_json }}
      saw {{ OSPF_BASIC.process | to_nice_json }}

- name: "SYS >> Dynamically determine if router should be an ABR"
  set_fact:
    SHOULD_BE_ABR: "{{ my_areas | length > 1 and 0 in my_areas }}"

- name: "SYS >> Ensure correct ABR status"
  assert:
    that: "OSPF_BASIC.process.is_abr == SHOULD_BE_ABR"
    msg: |-
      ABR status mismatch. expected {{ SHOULD_BE_ABR }} by inference,
      saw {{ OSPF_BASIC.process.is_abr }} on the actual device

- name: "SYS >> Ensure correct ASBR status"
  assert:
    that: "OSPF_BASIC.process.is_asbr == should_be_asbr"
    msg: |-
      ASBR status mismatch. expected {{ should_be_asbr }} by host config,
      saw {{ OSPF_BASIC.process.is_asbr }} on the actual device
  when: "should_be_asbr is defined"

- name: "SYS >> Ensure correct stub router status"
  assert:
    that: "OSPF_BASIC.process.is_stub_rtr == should_be_stub_rtr"
    msg: |-
      Stub router status mismatch. expected {{ should_be_stub_rtr }} by host
      config, saw {{ OSPF_BASIC.process.is_stub_rtr }} on the actual device
  when: "should_be_stub_rtr is defined"

- name: "SYS >> Ensure iteration area lists are equal length"
  assert:
    that:
      - "my_areas | length == OSPF_DB.areas | length"
      - "my_areas | length == OSPF_BASIC.areas | length"
    msg: |-
      Iteration lists must be same length, where the length is
      the number of areas that exist on a router. Ensure that
      the 'my_areas' list actually contains all of the areas expected
      to appear on a given router, no more and no less.
      saw my_areas:{{ my_areas | length }}
      saw OSPF_DB.areas:{{ OSPF_DB.areas | length }}
      saw OSPF_BASIC.areas:{{ OSPF_BASIC.areas | length }}

- name: "INCLUDE >> Perform iterative checks on area-specific parameters"
  include_tasks: "tasks_area_checks.yml"
  with_together:
    - "{{ my_areas }}"
    - "{{ OSPF_DB.areas }}"
    - "{{ OSPF_BASIC.areas }}"
  loop_control:
    label: "area_id:{{ item.0 }}"

- name: "Check FRR status in each relevant area"
  assert:
    that:
      - "item.value.frr.has_lfa == OSPF_FRR[item.key] is defined"
      - "item.value.frr.has_rlfa == OSPF_FRR[item.key].rlfa"
      - "item.value.frr.has_tilfa == OSPF_FRR[item.key].tilfa"
      - "item.value.frr.pref_pri | lower == OSPF_FRR[item.key].pref_pri"
    msg: |-
      FRR config mismatches between expected and actual
      expected {{ OSPF_FRR[item.key] | to_nice_json }}
      saw {{ item.value.frr | to_nice_json }}
  when: "item.value.frr is defined and item.key[4:] | int in my_areas"
  with_dict: "{{ all_areas }}"
  loop_control:
    label: "area_id:{{ item.key }}"
...
