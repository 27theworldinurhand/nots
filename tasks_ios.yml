---
# tasks_ios.yml
# show ip ospf: Get RID, area type, and ref bw info
# show ip ospf neighbor: Get OSPF neighbor info
# show ip ospf db db-sum: Get LSA1 and LSA2 counts
- name: "IOS >> Collect OSPF PID {{ process.id }} info from routers"
  ios_command:
    provider: "{{ login_creds }}"
    commands:
      - "show ip ospf {{ process.id }}"
      - "show ip ospf {{ process.id }} neighbor"
      - "show ip ospf {{ process.id }} database database-summary"
  register: IOS_OUTPUT

- name: "DEBUG >> Dump IOS text output (stdout)"
  debug:
    var: IOS_OUTPUT.stdout
    verbosity: 1

- name: "SYS >> Parse IOS text output into structured data"
  set_fact:
    OSPF_BASIC: "{{ IOS_OUTPUT.stdout[0] | ios_ospf_basic }}"
    OSPF_NBR: "{{ IOS_OUTPUT.stdout[1] | ios_ospf_neighbor }}"
    OSPF_DB: "{{ IOS_OUTPUT.stdout[2] | ios_ospf_dbsum }}"

- name: "DEBUG >> Dump OSPF_BASIC structured data"
  debug:
    var: OSPF_BASIC
    verbosity: 1

- name: "DEBUG >> Dump OSPF_NBR structured data"
  debug:
    var: OSPF_NBR
    verbosity: 1

- name: "DEBUG >> Dump OSPF_DB structured data"
  debug:
    var: OSPF_DB
    verbosity: 1

- name: "SYS >> Assert that all neighbors are healthy"
  assert:
    that: >-
      item.state | lower == 'full' or
      (item.state | lower == '2way' and item.role | lower == 'drother')
    msg: |-
      Invalid neighbor. state must be full or a combination of 2way plus
      the drother role to be considered valid.
      saw {{ item }}
  with_items: "{{ OSPF_NBR }}"
  loop_control:
    label: "nbr:{{ item.rid }}  state:{{ item.state }}  role:{{ item.role }}"

- name: "SYS >> Ensure the router has correct number of neighbors"
  assert:
    that: "my_nbr_count | int == OSPF_NBR | length"
    msg: |-
      Expected neighbor count did not match actual neighbors seen
      expected {{ my_nbr_count }}, saw {{ OSPF_NBR | length }}

- name: "SYS >> Check process ID {{ process.id }}, reference BW, SPF, etc."
  assert:
    that:
      - "process.id | int == OSPF_BASIC.process.id"
      - "process.ref_bw | int == OSPF_BASIC.process.ref_bw"
      - "process.init_spf | int == OSPF_BASIC.process.init_spf"
      - "process.min_spf | int == OSPF_BASIC.process.min_spf"
      - "process.max_spf | int == OSPF_BASIC.process.max_spf"
      - "process.has_ispf  == OSPF_BASIC.process.has_ispf"
    msg: |-
      Mismatched process-level configuration from specification.
      expected {{ process }}
      saw {{ OSPF_BASIC.process }}

- name: "SYS >> Dynamically determine if router should be an ABR"
  set_fact:
    SHOULD_BE_ABR: "{{ my_areas | length > 1 and 0 in my_areas }}"

- name: "DEBUG >> Dump SHOULD_BE_ABR"
  debug:
    var: SHOULD_BE_ABR
    verbosity: 1

- name: "SYS >> Ensure correct ABR status"
  assert:
    that: "OSPF_BASIC.process.is_abr == SHOULD_BE_ABR"
    msg: |-
      ABR status mismatch. expected {{ SHOULD_BE_ABR }} by inference,
      saw {{ OSPF_BASIC.process.is_abr }} on the actual device

- name: "SYS >> Ensure correct ASBR status"
  assert:
    that: "OSPF_BASIC.process.is_asbr == should_be_asbr"
    msg: |-
      ASBR status mismatch. expected {{ should_be_asbr }} by host config,
      saw {{ OSPF_BASIC.process.is_asbr }} on the actual device
  when: "should_be_asbr is defined"

- name: "SYS >> Ensure correct stub router status"
  assert:
    that: "OSPF_BASIC.process.is_stub_rtr == should_be_stub_rtr"
    msg: |-
      Stub router status mismatch. expected {{ should_be_stub_rtr }} by host
      config, saw {{ OSPF_BASIC.process.is_stub_rtr }} on the actual device
  when: "should_be_stub_rtr is defined"

- name: "SYS >> Ensure iteration area lists are equal length"
  assert:
    that:
      - "my_areas | length == OSPF_DB.areas | length"
      - "my_areas | length == OSPF_BASIC.areas | length"
    msg: |-
      Iteration lists must be same length, where the length is
      the number of areas that exist on a router.
      saw my_areas:{{ my_areas | length }}
      saw OSPF_DB.areas:{{ OSPF_DB.areas | length }}
      saw OSPF_BASIC.areas:{{ OSPF_BASIC.areas | length }}

- name: "INCLUDE >> Perform iterative checks on area-specific parameters"
  include_tasks: "tasks_area_checks.yml"
  with_together:
    - "{{ my_areas }}"
    - "{{ OSPF_DB.areas }}"
    - "{{ OSPF_BASIC.areas }}"
  loop_control:
    label: "area_id:{{ item.0 }}"
...
