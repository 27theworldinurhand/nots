---
# nots_playbook.yaml
- name: "Perform basic setup"
  hosts: localhost
  tasks:
    - name: "Get ansible date/time facts"
      setup:
        filter: "ansible_date_time"
        gather_subset: "!all"

    - name: "Store DTG as fact"
      set_fact:
        DTG: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: "SYS >> Ensure output logging directory exists"
      file:
        path: "logs"
        state: directory
      changed_when: false

    - name: "SYS >> Store the log directory for this run"
      set_fact:
        LOG_PATH: "logs/nots_{{ DTG }}/"

    - name: "SYS >> Build logging directory with path {{ LOG_PATH }}"
      file:
        path: "{{ LOG_PATH }}"
        state: directory
      changed_when: false

- name: "Collect network information and perform device-specific tests"
  hosts: ospf_routers
  vars_files:
    - "login_creds.vault"
  tasks:
    - name: "SYS >> Ensure mandatory keys are specified"
      assert:
        that:
          - "process.id is defined"
          - "process.id | int > 0 and process.id < 65536"
          - "my_areas is defined and my_areas | length > 0"
          - "all_areas is defined and all_areas.keys() | length > 0"
        msg: "Mandatory keys incorrectly formatted or omitted (see README.md)"

    - name: "SYS >> Ensure login_creds is defined with non-empty 'host' field"
      assert:
        that:
          - "login_creds is defined and login_creds.keys() | length"
          - "login_creds.host is defined and login_creds.host"
        msg: |-
          login_creds is malformed. This could signify a problem with the
          vault or variable inclusion. For an insecure workaround, you can
          define the 'login_creds' dictionary at the play variables level
          with plain-text passwords.

    - name: "INCLUDE >> Use correct commands for {{ device_type }} device"
      include_tasks: "devices/{{ device_type }}/main.yml"

- name: "Perform network-wide validation tests"
  hosts: localhost
  tasks:
    - name: "SYS >> Store empty OSPF RID list for future comparison"
      set_fact:
        OSPF_RIDS: []

    - name: "SYS >> Build OSPF RID list by iterating through hostvars"
      set_fact:
        OSPF_RIDS: "{{ OSPF_RIDS + [item.value.OSPF_BASIC.process.rid] }}"
      when: "item.key in groups.ospf_routers"
      with_dict: "{{ hostvars }}"
      loop_control:
        label: "host:{{ item.key }}"

    - name: "SYS >> Assert that there are no duplicate OSPF RIDs"
      assert:
        that: "OSPF_RIDS | unique | length == OSPF_RIDS | length"
        msg: |-
          OSPF_RIDS contained duplicates. Check the logs to find the bad nodes.
          {{ OSPF_RIDS | to_nice_json }}
...
